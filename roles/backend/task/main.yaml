- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: Install nodejs
  ansible.builtin.dnf:
    name: "{{item}}"
    state: latest
  loop:
  - mysql
  - nodejs

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: create app directory
  ansible.builtin.file:
    path: /app
    state: directory

- name: download the file
  ansible.builtin.get_url:
    url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip

- name: unzip backend code
  ansible.builtin.unarchive:
    src:  /tmp/backend.zip    # by defaul check in ansible servers
    dest: /app
    remote_src: yes  # so we are telling unzip the file in remore server not in ansible server

- name: install dependancies
  ansible.builtin.command: npm install
  args:
    chdir: /app   # we are telling ansible that run change dir before run npm install

- name: copy backend service file
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: install python mysql dependancies
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9  # it changes as per ansible python version

- name: import data into mysql
  community.mysql.mysql_db:
    login_user: "{{login_user}}"
    login_password: "{{login_password}}"
    login_host: "{{login_host}}"
    target: /app/schema/backend.sql
    state: import
    name: all

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: start and enable backend service
  ansible.builtin.service:
    name: backend
    state: started
    enabled: yes